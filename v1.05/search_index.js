var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PartialFunctions\nDocTestSetup = quote\n    using PartialFunctions\nend","category":"page"},{"location":"#PartialFunctions","page":"Home","title":"PartialFunctions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a small Julia package that makes partial function application as simple as possible","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To apply an argument x to a function f, use the $ binary operator like so","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> f $ x\nf(x, ...)","category":"page"},{"location":"","page":"Home","title":"Home","text":"To apply multiple arguments, wrap them in a Tuple, like you would a normal function call","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> f $ (x, y, z)\nf(x, y, z, ...)","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> f = println $ ((\"This is\", \"a Tuple\"),)\nprintln((\"This is\", \"a Tuple\"), ...)\n\njulia> f(\", and this is an additional argument\")\n(\"This is\", \"a Tuple\"), and this is an additional argument","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using PartialFunctions\n\njulia> a(x) = x^2\na (generic function with 1 method)\n\njulia> f = map $ a\nmap(a, ...)\n\njulia> f([1,2,3])\n3-element Array{Int64,1}:\n 1\n 4\n 9","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> simonsays = println $ \"Simon says: \"\nprintln(\"Simon says: \", ...)\n\njulia> simonsays(\"Partial function application is cool!\")\nSimon says: Partial function application is cool!\n\njulia> typeof(simonsays)\nPartialFunctions.PartialFunction{typeof(println),Tuple{String}}","category":"page"},{"location":"#The-Reverse-Pipe","page":"Home","title":"The Reverse Pipe","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PartialFunctions also exports the <|, or \"reverse pipe\" operator, which can be used to apply the arguments succeeding it to the function preceding it. This operator has low precedence, making it useful when chaining function calls if one wants to avoid a lot of parentheses","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here's an extremely contrived example to add a bunch of numbers together","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> (+) $ 2 $ 3 $ 5 $ 10 <| 12\n32","category":"page"},{"location":"","page":"Home","title":"Home","text":"Unlike the normal pipe (|>), it can also be used with tuples of arguments","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> (+) <| (1, 2)...\n3","category":"page"},{"location":"","page":"Home","title":"Home","text":"Passing an empty tuple calls the preceding function with zero arguments","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> a = isequal $ (1, 2)\nisequal(1, 2, ...)\n\njulia> isequal $ (1, 2) <| ()   # equivalent to a() or isequal(1, 2)\nfalse","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"CurrentModule = PartialFunctions","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [PartialFunctions]","category":"page"},{"location":"internals/#PartialFunctions.:$-Tuple{Function,Tuple}","page":"Internals","title":"PartialFunctions.:$","text":"($)(f::Function, args...)\n\nPartially apply the given arguments to f. Typically used as infix f $ args\n\nThe returned function is of type PartialFunctions.PartialFunction{typeof(f), typeof(args)}\n\nExamples\n\njulia> using PartialFunctions\n\njulia> simonsays = println $ \"Simon says: \"\nprintln(\"Simon says: \", ...)\n\njulia> simonsays(\"Partial function application is cool!\")\nSimon says: Partial function application is cool!\n\njulia> typeof(simonsays)\nPartialFunctions.PartialFunction{typeof(println),Tuple{String}}\n\n\n\n\n\n","category":"method"},{"location":"internals/#PartialFunctions.:<|-Tuple{Function,Vararg{Any,N} where N}","page":"Internals","title":"PartialFunctions.:<|","text":"<|(f, args)\n\nApplies a function to the succeeding argument or tuple of arguments. Acts as the reverse of |>, and is especially useful when combined with partial functions for  an alternative, low-parenthese function chaining syntax\n\nExamples\n\njulia> using PartialFunctions\n\njulia> isdigit <| '1'\ntrue\n\njulia> (+) <| (2, 3)...\n5\n\njulia> map $ Int <| [1.0, 2.0, 3.0]\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\n\n\n\n\n","category":"method"}]
}
